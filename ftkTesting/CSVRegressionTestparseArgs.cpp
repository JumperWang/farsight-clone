#include "CSVRegressionTestparseArgs.h"

#include <stdexcept>

#include "metaCommand.h"

namespace CSVRegressionTest
{

bool
parseArgs( int argc, char * argv[], Args & args )
{
	// We will parse with MetaCommand
	MetaCommand command;

	command.AddField( "TestCSVFile",
	 	"The CSV file that was generated by the test.",
	 	MetaCommand::FILE,
	 	MetaCommand::DATA_IN
	 	);
	command.AddField( "BaselineCSVFile",
		"The CSV file that should have been generated by the test; the 'gold standard.'",
		MetaCommand::FILE,
		MetaCommand::DATA_IN
		);
	bool required = false;
	command.SetOption( "AbsoluteTolerance", "a",
		required,
		"Absolute tolerance for numerical entries."
		);
	required = true;
	command.AddOptionField( "AbsoluteTolerance", "AbsoluteTolerance",
		MetaCommand::FLOAT,
		required,
		"1e25"
	);

	required = false;
	command.SetOption( "FractionalTolerance", "f",
		required,
		"Fractional tolerance for numerical entries."
		);
	required = true;
	command.AddOptionField( "FractionalTolerance", "FractionalTolerance",
		MetaCommand::FLOAT,
		required,
		"0.03"
	);
	command.SetOptionRange( "FractionalTolerance", "FractionalTolerance",
		"0.0", "1.0" );

	if( !command.Parse( argc, argv ) )
		{
		return false;
		}
	args.TestCSVFile = command.GetValueAsString( "TestCSVFile" );
	args.BaselineCSVFile = command.GetValueAsString( "BaselineCSVFile" );
	args.AbsoluteTolerance = command.GetValueAsFloat( "AbsoluteTolerance", "AbsoluteTolerance" );
	args.FractionalTolerance = command.GetValueAsFloat( "FractionalTolerance", "FractionalTolerance" );

	return true;
}

} // end namespace CSVRegressionTest
